       // const char * temp = SSGetWord(i,j);
           
           // k = 0;
            //while(temp[k] != '\0')
           // {
              //  first[d] = &temp[k];
              //  printf ("**");
              //  printf ("%c", first);
              //  d++;
              //  k++;
            //}
           // printf("%d \n",k);

                        /* no comma if line is unshifted
                         * otherwise comma follows last word on original line
                         */
                        //if (shiftNum != 0 && j == numWords-shiftNum-1)
                                //printf(",");

                        /* space follows every word but the last */
                        //if (j != SSNumWords(i)-1)
                                //printf(" ");
                                
/*
/********** Output module---implementation **********/

#include <stdio.h>
#include "kwic.h"
#include "Output.h"
#include "ShiftSort.h"

/***** local constants *****/

/***** local types *****/

/***** exported functions *****/

void OUInit(void)
{
	/* intentionally empty */
}

void OUPrint(void)
{
    int i,j,k,w;
    int d = 0;
    const char * first[10];
    const char * second[10];

        for (i = 0; i < SSNumLines(); i++) {
                int numWords = SSNumWords(i);
                for (j = 0; j < numWords; j++) {
                        int shiftNum = SSGetShiftNum(i);
                        // need to store spaces in the array including comma 
                        second[j] = SSGetWord(i,j);
                        //d++;
                }
                const char *key = second[0];
                for (w = 0; w < 10; w++){
                	if (w >= SSGetShiftNum(i) && second[w] != "") {
                		first[d] = second[w];
                		second[w]= "";
                		d++;
                	}
                }
               // printf("%s\n", key);
                 //for (k = 0; k < numWords-SSGetShiftNum(i); k++ ) {
                 //printf("second: ");
                // printf("%s", second[k]);
                // if (j != SSNumWords(i)-1){
                  // printf(" ");
                  //  }
                    }
                    
                for (k = 0; k < SSGetShiftNum(i); k++ ) {
                 printf("%s", first[k]);
                 if (j != SSNumWords(i)-1){
                   printf(" ");
                    }
        		
        		}
                printf("\n");
        }
       
}*/



define(cew_Variables,
         `my $cew_Test_Count=0;
          my $cew_Error_Count=0;'
)

define(cew_Summary,
         `print("\n**********Summary**********\n");
          print("Total number of test cases = ", $cew_Test_Count, "\n");
          print("Total number of test cases in error = ", $cew_Error_Count, "\n");'
)





define(cew_Ncase,
          `$cew_Test_Count=$cew_Test_Count+1;
          $2 ;
          if (($3) $5 ($4)) {
             $cew_Error_Count=$cew_Error_Count+1;
             print("Test Case ERROR (Ncase) in script at line number ", $1, "\n");
             print("Actual Value is ", $3, " \n");
             print("Expected Value is ", $4, "\n");
          }'
)


/calculating length of all words before the key word
                /*int fCharCount = 0;
                for (b = 0; b < f; b++) {
                 	for(a = 0; first[b]; a++)
               		 {
               		 	const char * tmpF = first[b];
                		if(tmpF[b] != ' '){
                			fCharCount++;
                		}
                		fCharCount++;
                }*/
                
       //         printf ("%d\n", fCharCount);
                
                
                //const char * tmpFirst = first[0]
              //  for (a = 0; a < f; a++)
                	//const char * tmpFirst = first[a];



     for (k = 0; k < numWords; k++ ) {
                 printf("%s", tmpString[k]);
                 if (j != SSNumWords(i)-1){
                   printf(" ");
                    }
        		
        		}